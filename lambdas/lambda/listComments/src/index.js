"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const Conversor_1 = require("generic-stuff/dist/util/Conversor");
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const handler = async (event) => {
    try {
        console.log('event', event);
        // const filterExpression = 'visible = :visible AND portfolio = :portfolio';
        const filterExpression = undefined;
        // const expressionAttributeValues = {
        //   ':visible': true, // Return only visible offers
        //   ':portfolio': '0001',
        // };
        const expressionAttributeValues = undefined;
        const params = {
            TableName: process.env.TABLE_NAME || '',
            Limit: event.arguments?.input?.limit || 20,
            ExpressionAttributeValues: expressionAttributeValues,
            FilterExpression: filterExpression,
        };
        const data = await dynamoDB.scan(params).promise();
        console.log('data', data);
        let result;
        if (!data.Items || data.Items.length === 0) {
            result = [];
        }
        else {
            result = Conversor_1.convertAttributeMapCollectionToCommentCollection(data.Items);
        }
        console.log('result', result);
        return { items: result };
    }
    catch (error) {
        const body = error.stack || JSON.stringify(error, null, 2);
        console.error('ERROR!!!', body);
        throw error;
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFHL0IsaUVBQXFHO0FBSXJHLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUU1QyxNQUFNLE9BQU8sR0FBNEYsS0FBSyxFQUNuSCxLQUFLLEVBQ0wsRUFBRTtJQUNGLElBQUk7UUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU1Qiw0RUFBNEU7UUFDNUUsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDbkMsc0NBQXNDO1FBQ3RDLG9EQUFvRDtRQUNwRCwwQkFBMEI7UUFDMUIsS0FBSztRQUNMLE1BQU0seUJBQXlCLEdBQUcsU0FBUyxDQUFDO1FBRTVDLE1BQU0sTUFBTSxHQUFjO1lBQ3hCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFO1lBQ3ZDLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRTtZQUMxQyx5QkFBeUIsRUFBRSx5QkFBeUI7WUFDcEQsZ0JBQWdCLEVBQUUsZ0JBQWdCO1NBQ25DLENBQUM7UUFFRixNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUIsSUFBSSxNQUEwQixDQUFDO1FBRS9CLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMxQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE1BQU0sR0FBRyw0REFBZ0QsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkU7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU5QixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO0tBQzFCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzRCxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoQyxNQUFNLEtBQUssQ0FBQztLQUNiO0FBQ0gsQ0FBQyxDQUFDO0FBeENXLFFBQUEsT0FBTyxXQXdDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBTeW5jUmVzb2x2ZXJIYW5kbGVyIH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBUYWJsZUd1ZXN0Ym9va0NvbW1lbnRGaWx0ZXJJbnB1dCB9IGZyb20gJ2dlbmVyaWMtc3R1ZmYvZGlzdC90eXBlcy9UYWJsZUd1ZXN0Ym9va0NvbW1lbnRGaWx0ZXJJbnB1dCc7XG5pbXBvcnQgeyBHdWVzdGJvb2tDb21tZW50IH0gZnJvbSAnZ2VuZXJpYy1zdHVmZi9kaXN0L3R5cGVzL0d1ZXN0Ym9va0NvbW1lbnQnO1xuaW1wb3J0IHsgY29udmVydEF0dHJpYnV0ZU1hcENvbGxlY3Rpb25Ub0NvbW1lbnRDb2xsZWN0aW9uIH0gZnJvbSAnZ2VuZXJpYy1zdHVmZi9kaXN0L3V0aWwvQ29udmVyc29yJztcbmltcG9ydCB7IERvY3VtZW50Q2xpZW50IH0gZnJvbSAnYXdzLXNkay9saWIvZHluYW1vZGIvZG9jdW1lbnRfY2xpZW50JztcbmltcG9ydCBTY2FuSW5wdXQgPSBEb2N1bWVudENsaWVudC5TY2FuSW5wdXQ7XG5cbmNvbnN0IGR5bmFtb0RCID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcjogQXBwU3luY1Jlc29sdmVySGFuZGxlcjxUYWJsZUd1ZXN0Ym9va0NvbW1lbnRGaWx0ZXJJbnB1dCwgeyBpdGVtczogR3Vlc3Rib29rQ29tbWVudFtdIH0+ID0gYXN5bmMgKFxuICBldmVudCxcbikgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdldmVudCcsIGV2ZW50KTtcblxuICAgIC8vIGNvbnN0IGZpbHRlckV4cHJlc3Npb24gPSAndmlzaWJsZSA9IDp2aXNpYmxlIEFORCBwb3J0Zm9saW8gPSA6cG9ydGZvbGlvJztcbiAgICBjb25zdCBmaWx0ZXJFeHByZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgIC8vIGNvbnN0IGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMgPSB7XG4gICAgLy8gICAnOnZpc2libGUnOiB0cnVlLCAvLyBSZXR1cm4gb25seSB2aXNpYmxlIG9mZmVyc1xuICAgIC8vICAgJzpwb3J0Zm9saW8nOiAnMDAwMScsXG4gICAgLy8gfTtcbiAgICBjb25zdCBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzID0gdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgcGFyYW1zOiBTY2FuSW5wdXQgPSB7XG4gICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgJycsXG4gICAgICBMaW1pdDogZXZlbnQuYXJndW1lbnRzPy5pbnB1dD8ubGltaXQgfHwgMjAsXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzLFxuICAgICAgRmlsdGVyRXhwcmVzc2lvbjogZmlsdGVyRXhwcmVzc2lvbixcbiAgICB9O1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGR5bmFtb0RCLnNjYW4ocGFyYW1zKS5wcm9taXNlKCk7XG5cbiAgICBjb25zb2xlLmxvZygnZGF0YScsIGRhdGEpO1xuICAgIGxldCByZXN1bHQ6IEd1ZXN0Ym9va0NvbW1lbnRbXTtcblxuICAgIGlmICghZGF0YS5JdGVtcyB8fCBkYXRhLkl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdWx0ID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGNvbnZlcnRBdHRyaWJ1dGVNYXBDb2xsZWN0aW9uVG9Db21tZW50Q29sbGVjdGlvbihkYXRhLkl0ZW1zKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygncmVzdWx0JywgcmVzdWx0KTtcblxuICAgIHJldHVybiB7IGl0ZW1zOiByZXN1bHQgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBib2R5ID0gZXJyb3Iuc3RhY2sgfHwgSlNPTi5zdHJpbmdpZnkoZXJyb3IsIG51bGwsIDIpO1xuICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SISEhJywgYm9keSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iXX0=