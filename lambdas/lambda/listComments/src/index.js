"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const Conversor_1 = require("generic-stuff/dist/util/Conversor");
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const handler = async (event) => {
    try {
        console.log('event', event);
        const filterExpression = undefined;
        const expressionAttributeValues = undefined;
        const params = {
            TableName: process.env.TABLE_NAME || '',
            Limit: event.arguments?.input?.limit || 20,
            ExpressionAttributeValues: expressionAttributeValues,
            FilterExpression: filterExpression,
        };
        const data = await dynamoDB.scan(params).promise();
        let result;
        if (!data.Items || data.Items.length === 0) {
            result = [];
        }
        else {
            result = Conversor_1.convertAttributeMapCollectionToCommentCollection(data.Items);
        }
        return { items: result };
    }
    catch (error) {
        const body = error.stack || JSON.stringify(error, null, 2);
        console.error('ERROR!!!', body);
        throw error;
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFHL0IsaUVBQXFHO0FBSXJHLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUU1QyxNQUFNLE9BQU8sR0FBNEYsS0FBSyxFQUNuSCxLQUFLLEVBQ0wsRUFBRTtJQUNGLElBQUk7UUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU1QixNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztRQUNuQyxNQUFNLHlCQUF5QixHQUFHLFNBQVMsQ0FBQztRQUU1QyxNQUFNLE1BQU0sR0FBYztZQUN4QixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRTtZQUN2QyxLQUFLLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDMUMseUJBQXlCLEVBQUUseUJBQXlCO1lBQ3BELGdCQUFnQixFQUFFLGdCQUFnQjtTQUNuQyxDQUFDO1FBRUYsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRW5ELElBQUksTUFBMEIsQ0FBQztRQUUvQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUNiO2FBQU07WUFDTCxNQUFNLEdBQUcsNERBQWdELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztLQUMxQjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsTUFBTSxLQUFLLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQztBQWhDVyxRQUFBLE9BQU8sV0FnQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwU3luY1Jlc29sdmVySGFuZGxlciB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHsgVGFibGVHdWVzdGJvb2tDb21tZW50RmlsdGVySW5wdXQgfSBmcm9tICdnZW5lcmljLXN0dWZmL2Rpc3QvdHlwZXMvVGFibGVHdWVzdGJvb2tDb21tZW50RmlsdGVySW5wdXQnO1xuaW1wb3J0IHsgR3Vlc3Rib29rQ29tbWVudCB9IGZyb20gJ2dlbmVyaWMtc3R1ZmYvZGlzdC90eXBlcy9HdWVzdGJvb2tDb21tZW50JztcbmltcG9ydCB7IGNvbnZlcnRBdHRyaWJ1dGVNYXBDb2xsZWN0aW9uVG9Db21tZW50Q29sbGVjdGlvbiB9IGZyb20gJ2dlbmVyaWMtc3R1ZmYvZGlzdC91dGlsL0NvbnZlcnNvcic7XG5pbXBvcnQgeyBEb2N1bWVudENsaWVudCB9IGZyb20gJ2F3cy1zZGsvbGliL2R5bmFtb2RiL2RvY3VtZW50X2NsaWVudCc7XG5pbXBvcnQgU2NhbklucHV0ID0gRG9jdW1lbnRDbGllbnQuU2NhbklucHV0O1xuXG5jb25zdCBkeW5hbW9EQiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXI6IEFwcFN5bmNSZXNvbHZlckhhbmRsZXI8VGFibGVHdWVzdGJvb2tDb21tZW50RmlsdGVySW5wdXQsIHsgaXRlbXM6IEd1ZXN0Ym9va0NvbW1lbnRbXSB9PiA9IGFzeW5jIChcbiAgZXZlbnQsXG4pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnZXZlbnQnLCBldmVudCk7XG5cbiAgICBjb25zdCBmaWx0ZXJFeHByZXNzaW9uID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMgPSB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBwYXJhbXM6IFNjYW5JbnB1dCA9IHtcbiAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJyxcbiAgICAgIExpbWl0OiBldmVudC5hcmd1bWVudHM/LmlucHV0Py5saW1pdCB8fCAyMCxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsXG4gICAgICBGaWx0ZXJFeHByZXNzaW9uOiBmaWx0ZXJFeHByZXNzaW9uLFxuICAgIH07XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZHluYW1vREIuc2NhbihwYXJhbXMpLnByb21pc2UoKTtcblxuICAgIGxldCByZXN1bHQ6IEd1ZXN0Ym9va0NvbW1lbnRbXTtcblxuICAgIGlmICghZGF0YS5JdGVtcyB8fCBkYXRhLkl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdWx0ID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGNvbnZlcnRBdHRyaWJ1dGVNYXBDb2xsZWN0aW9uVG9Db21tZW50Q29sbGVjdGlvbihkYXRhLkl0ZW1zKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBpdGVtczogcmVzdWx0IH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgYm9keSA9IGVycm9yLnN0YWNrIHx8IEpTT04uc3RyaW5naWZ5KGVycm9yLCBudWxsLCAyKTtcbiAgICBjb25zb2xlLmVycm9yKCdFUlJPUiEhIScsIGJvZHkpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIl19