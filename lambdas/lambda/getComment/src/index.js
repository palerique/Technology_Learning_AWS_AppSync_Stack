"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const dynamoDb = new aws_sdk_1.DynamoDB.DocumentClient();
const params = {
    TableName: process.env.DYNAMODB_TABLE || 'Heroes',
};
function getData() {
    const heroes = [
        { id: '11', name: 'Dr Nice' },
        { id: '12', name: 'Narco' },
        { id: '13', name: 'Bombasto' },
        { id: '14', name: 'Celeritas' },
        { id: '15', name: 'Magneta' },
        { id: '16', name: 'RubberMan' },
        { id: '17', name: 'Dynama' },
        { id: '18', name: 'Dr IQ' },
        { id: '19', name: 'Magma' },
        { id: '20', name: 'Tornado' },
    ];
    return { heroes };
}
const handler = (event, context) => {
    // fetch all todos from the database
    // For production workloads you should design your tables and indexes so that your applications can use Query instead of Scan.
    dynamoDb.scan(params, (error, queryResult) => {
        // handle potential errors
        if (error) {
            console.error(error);
            return {
                statusCode: error.statusCode || 501,
                headers: { 'Content-Type': 'text/plain' },
                body: "Couldn't fetch the todo items.",
            };
        }
        return {
            statusCode: 200,
            body: JSON.stringify({ result: queryResult, data: getData(), event, context }, null, 2),
        };
    });
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBbUM7QUFHbkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxrQkFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQy9DLE1BQU0sTUFBTSxHQUFjO0lBQ3hCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxRQUFRO0NBQ2xELENBQUM7QUFPRixTQUFTLE9BQU87SUFDZCxNQUFNLE1BQU0sR0FBVztRQUNyQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtRQUM3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtRQUMzQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtRQUM5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTtRQUMvQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtRQUM3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTtRQUMvQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtRQUM1QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtRQUMzQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtRQUMzQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtLQUM5QixDQUFDO0lBQ0YsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLENBQUM7QUFFTSxNQUFNLE9BQU8sR0FBMkIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDaEUsb0NBQW9DO0lBQ3BDLDhIQUE4SDtJQUM5SCxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsRUFBRTtRQUMzQywwQkFBMEI7UUFDMUIsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLElBQUksR0FBRztnQkFDbkMsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRTtnQkFDekMsSUFBSSxFQUFFLGdDQUFnQzthQUN2QyxDQUFDO1NBQ0g7UUFDRCxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3hGLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQWxCVyxRQUFBLE9BQU8sV0FrQmxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5SGFuZGxlciB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgRHluYW1vREIgfSBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IFNjYW5JbnB1dCB9IGZyb20gJ2F3cy1zZGsvY2xpZW50cy9keW5hbW9kYic7XG5cbmNvbnN0IGR5bmFtb0RiID0gbmV3IER5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCBwYXJhbXM6IFNjYW5JbnB1dCA9IHtcbiAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5EWU5BTU9EQl9UQUJMRSB8fCAnSGVyb2VzJyxcbn07XG5cbmludGVyZmFjZSBIZXJvIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhKCk6IHsgaGVyb2VzOiBIZXJvW10gfSB7XG4gIGNvbnN0IGhlcm9lczogSGVyb1tdID0gW1xuICAgIHsgaWQ6ICcxMScsIG5hbWU6ICdEciBOaWNlJyB9LFxuICAgIHsgaWQ6ICcxMicsIG5hbWU6ICdOYXJjbycgfSxcbiAgICB7IGlkOiAnMTMnLCBuYW1lOiAnQm9tYmFzdG8nIH0sXG4gICAgeyBpZDogJzE0JywgbmFtZTogJ0NlbGVyaXRhcycgfSxcbiAgICB7IGlkOiAnMTUnLCBuYW1lOiAnTWFnbmV0YScgfSxcbiAgICB7IGlkOiAnMTYnLCBuYW1lOiAnUnViYmVyTWFuJyB9LFxuICAgIHsgaWQ6ICcxNycsIG5hbWU6ICdEeW5hbWEnIH0sXG4gICAgeyBpZDogJzE4JywgbmFtZTogJ0RyIElRJyB9LFxuICAgIHsgaWQ6ICcxOScsIG5hbWU6ICdNYWdtYScgfSxcbiAgICB7IGlkOiAnMjAnLCBuYW1lOiAnVG9ybmFkbycgfSxcbiAgXTtcbiAgcmV0dXJuIHsgaGVyb2VzIH07XG59XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyOiBBUElHYXRld2F5UHJveHlIYW5kbGVyID0gKGV2ZW50LCBjb250ZXh0KSA9PiB7XG4gIC8vIGZldGNoIGFsbCB0b2RvcyBmcm9tIHRoZSBkYXRhYmFzZVxuICAvLyBGb3IgcHJvZHVjdGlvbiB3b3JrbG9hZHMgeW91IHNob3VsZCBkZXNpZ24geW91ciB0YWJsZXMgYW5kIGluZGV4ZXMgc28gdGhhdCB5b3VyIGFwcGxpY2F0aW9ucyBjYW4gdXNlIFF1ZXJ5IGluc3RlYWQgb2YgU2Nhbi5cbiAgZHluYW1vRGIuc2NhbihwYXJhbXMsIChlcnJvciwgcXVlcnlSZXN1bHQpID0+IHtcbiAgICAvLyBoYW5kbGUgcG90ZW50aWFsIGVycm9yc1xuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXNDb2RlIHx8IDUwMSxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nIH0sXG4gICAgICAgIGJvZHk6IFwiQ291bGRuJ3QgZmV0Y2ggdGhlIHRvZG8gaXRlbXMuXCIsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyByZXN1bHQ6IHF1ZXJ5UmVzdWx0LCBkYXRhOiBnZXREYXRhKCksIGV2ZW50LCBjb250ZXh0IH0sIG51bGwsIDIpLFxuICAgIH07XG4gIH0pO1xufTtcbiJdfQ==