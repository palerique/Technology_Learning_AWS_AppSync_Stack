"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const handler = async (event) => {
    try {
        const data = await dynamoDB
            .query({
            TableName: process.env.TABLE_NAME || '',
            IndexName: process.env.GSI_NAME,
            KeyConditionExpression: 'id = :id',
            ExpressionAttributeValues: {
                ':id': event.arguments.input.id,
            },
        })
            .promise();
        console.log('Data', JSON.stringify(data));
        if (!data.Items || data.Items.length === 0) {
            throw new Error('Result set contains no items');
        }
        const attributeMap = data.Items[0];
        console.log(AWS.DynamoDB.Converter.unmarshall(attributeMap));
        const firstItem = {
            author: attributeMap.author,
            createdDate: attributeMap.createdDate,
            guestbookId: attributeMap.guestbookId,
            id: attributeMap.id,
            message: attributeMap.message,
        };
        console.log('First Item', firstItem);
        await dynamoDB
            .delete({
            TableName: process.env.TABLE_NAME || '',
            Key: {
                guestbookId: firstItem.guestbookId,
                createdDate: firstItem.createdDate,
            },
        })
            .promise();
        return firstItem;
    }
    catch (error) {
        const body = error.stack || JSON.stringify(error, null, 2);
        console.error('ERROR!!!', body);
        throw error;
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFJL0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBRTVDLE1BQU0sT0FBTyxHQUEwRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDNUcsSUFBSTtRQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sUUFBUTthQUN4QixLQUFLLENBQUM7WUFDTCxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRTtZQUN2QyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRO1lBQy9CLHNCQUFzQixFQUFFLFVBQVU7WUFDbEMseUJBQXlCLEVBQUU7Z0JBQ3pCLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO2FBQ2hDO1NBQ0YsQ0FBQzthQUNELE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7U0FDakQ7UUFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDN0QsTUFBTSxTQUFTLEdBQXFCO1lBQ2xDLE1BQU0sRUFBRSxZQUFZLENBQUMsTUFBTTtZQUMzQixXQUFXLEVBQUUsWUFBWSxDQUFDLFdBQVc7WUFDckMsV0FBVyxFQUFFLFlBQVksQ0FBQyxXQUFXO1lBQ3JDLEVBQUUsRUFBRSxZQUFZLENBQUMsRUFBRTtZQUNuQixPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU87U0FDOUIsQ0FBQztRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXJDLE1BQU0sUUFBUTthQUNYLE1BQU0sQ0FBQztZQUNOLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFO1lBQ3ZDLEdBQUcsRUFBRTtnQkFDSCxXQUFXLEVBQUUsU0FBUyxDQUFDLFdBQVc7Z0JBQ2xDLFdBQVcsRUFBRSxTQUFTLENBQUMsV0FBVzthQUNuQztTQUNGLENBQUM7YUFDRCxPQUFPLEVBQUUsQ0FBQztRQUViLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzRCxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoQyxNQUFNLEtBQUssQ0FBQztLQUNiO0FBQ0gsQ0FBQyxDQUFDO0FBOUNXLFFBQUEsT0FBTyxXQThDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBTeW5jUmVzb2x2ZXJIYW5kbGVyIH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBEZWxldGVHdWVzdGJvb2tDb21tZW50SW5wdXQgfSBmcm9tICdnZW5lcmljLXN0dWZmL2Rpc3QvdHlwZXMvRGVsZXRlR3Vlc3Rib29rQ29tbWVudElucHV0JztcbmltcG9ydCB7IEd1ZXN0Ym9va0NvbW1lbnQgfSBmcm9tICdnZW5lcmljLXN0dWZmL2Rpc3QvdHlwZXMvR3Vlc3Rib29rQ29tbWVudCc7XG5cbmNvbnN0IGR5bmFtb0RCID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcjogQXBwU3luY1Jlc29sdmVySGFuZGxlcjxEZWxldGVHdWVzdGJvb2tDb21tZW50SW5wdXQsIEd1ZXN0Ym9va0NvbW1lbnQ+ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGR5bmFtb0RCXG4gICAgICAucXVlcnkoe1xuICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgJycsXG4gICAgICAgIEluZGV4TmFtZTogcHJvY2Vzcy5lbnYuR1NJX05BTUUsXG4gICAgICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246ICdpZCA9IDppZCcsXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgICAnOmlkJzogZXZlbnQuYXJndW1lbnRzLmlucHV0LmlkLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIC5wcm9taXNlKCk7XG5cbiAgICBjb25zb2xlLmxvZygnRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblxuICAgIGlmICghZGF0YS5JdGVtcyB8fCBkYXRhLkl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXN1bHQgc2V0IGNvbnRhaW5zIG5vIGl0ZW1zJyk7XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlTWFwID0gZGF0YS5JdGVtc1swXTtcbiAgICBjb25zb2xlLmxvZyhBV1MuRHluYW1vREIuQ29udmVydGVyLnVubWFyc2hhbGwoYXR0cmlidXRlTWFwKSk7XG4gICAgY29uc3QgZmlyc3RJdGVtOiBHdWVzdGJvb2tDb21tZW50ID0ge1xuICAgICAgYXV0aG9yOiBhdHRyaWJ1dGVNYXAuYXV0aG9yLFxuICAgICAgY3JlYXRlZERhdGU6IGF0dHJpYnV0ZU1hcC5jcmVhdGVkRGF0ZSxcbiAgICAgIGd1ZXN0Ym9va0lkOiBhdHRyaWJ1dGVNYXAuZ3Vlc3Rib29rSWQsXG4gICAgICBpZDogYXR0cmlidXRlTWFwLmlkLFxuICAgICAgbWVzc2FnZTogYXR0cmlidXRlTWFwLm1lc3NhZ2UsXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZygnRmlyc3QgSXRlbScsIGZpcnN0SXRlbSk7XG5cbiAgICBhd2FpdCBkeW5hbW9EQlxuICAgICAgLmRlbGV0ZSh7XG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJyxcbiAgICAgICAgS2V5OiB7XG4gICAgICAgICAgZ3Vlc3Rib29rSWQ6IGZpcnN0SXRlbS5ndWVzdGJvb2tJZCxcbiAgICAgICAgICBjcmVhdGVkRGF0ZTogZmlyc3RJdGVtLmNyZWF0ZWREYXRlLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIC5wcm9taXNlKCk7XG5cbiAgICByZXR1cm4gZmlyc3RJdGVtO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGJvZHkgPSBlcnJvci5zdGFjayB8fCBKU09OLnN0cmluZ2lmeShlcnJvciwgbnVsbCwgMik7XG4gICAgY29uc29sZS5lcnJvcignRVJST1IhISEnLCBib2R5KTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiJdfQ==